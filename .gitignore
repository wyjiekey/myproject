# 通过合理配置 .gitignore，可以避免向仓库提交不必要的文件，保持版本库的整洁。

# 这是注释，不会被解析， 空行也会被忽略，用于提高可读性

# 已跟踪文件：.gitignore 只能忽略未被跟踪的文件。如果文件已被提交，需要先从暂存区移除    git rm --cached file.txt  ： 保留本地文件，但不再跟踪
# 全局忽略：可通过 ~/.gitignore_global 或 git config --global core.excludesfile 设置全局忽略规则，对所有仓库生效。

# 优先级： 文件位置：子目录中的 .gitignore 会覆盖父目录中的规则；   同文件内：越靠后的规则优先级越高（可用于先忽略再排除）。
# *.log           # 先忽略所有 .log
# !*.log          # 再排除所有 .log（此规则会覆盖上一条）

# 排除规则  使用 ! 前缀可以排除已被忽略的文件或目录（即使父目录被忽略）。
# *.log           # 忽略所有 .log 文件
# !important.log  # 但不忽略 important.log

# 忽略规则：可以使用通配符、路径、文件名等来指定要忽略的文件或目录。
# 子目录匹配：以 / 结尾的模式只匹配目录。    /node_modules/ ： 忽略根目录下的 node_modules 目录      temp ： 忽略名为 temp 的文件或目录
# temp/           # 忽略 temp 目录及其所有内容
# temp            # 忽略名为 temp 的文件或目录
.venv/

# 相对路径：从 .gitignore 文件所在目录开始匹配。
# docs/notes.txt  # 忽略 docs 目录下的 notes.txt

# 根目录匹配：以 / 开头的模式只匹配仓库根目录下的文件或目录
#/config.json    # 只忽略仓库根目录的 config.json
#config.json     # 忽略任意层级的 config.json（包括根目录）

# * ：# 这是一个通配符，表示匹配任意字符   *.log  : 这是一个通配符，表示忽略所有 .log 后缀的文件
*.tmp
*.log
*.cache
*.bak

# ** ：# 这是一个通配符，表示匹配任意目录    **/temp/ ： 这是一个通配符，表示忽略任意目录下的 temp 目录   src?/**/*.log 忽略src目录下的任意子目录中的 log 文件
**/temp/

# ? ：# 这是一个通配符，表示匹配任意单个字符
# file?.txt    # 忽略 file1.txt、file2.txt 等，但不包括 file.txt


# 方括号：[ ] 用于匹配指定范围内的单个字符。
# [abc] ：# 这是一个字符集，表示匹配 a、b 或 c 中的任意一个字符
# [a-z] ：# 这是一个字符范围，表示匹配 a 到 z 中的任意一个字符
# [!abc] ：# 这是一个否定字符集

# 特殊字符  转义：如果需要匹配特殊字符本身（如 *、?、!），使用 \ 转义。  \*.txt  ： 忽略名为 *.txt 的文件（而非所有 .txt 文件）